<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ORMGen</name>
    </assembly>
    <members>
        <member name="T:ORMGen.Builders.CSHelper">
            <summary>
            Common C# type extension
            </summary>
        </member>
        <member name="M:ORMGen.Builders.CSHelper.isNullable(System.Type)">
            <summary>
            Check if type is nullable
            </summary>
            <param name="type">Type type</param>
            <returns>True if type is Nullable&lt;&gt;</returns>
        </member>
        <member name="M:ORMGen.Builders.CSHelper.Blank(System.String)">
            <summary>
            Indicates whether a specified string is null, empty, or consists only of white-space characters.
            calls string.IsNullOrWhiteSpace()
            </summary>
            <param name="str">The string to test.</param>
            <returns>reault of string.IsNullOrWhiteSpace()</returns>
        </member>
        <member name="M:ORMGen.Builders.CSHelper.notBlank(System.String)">
            <summary>
            Indicates whether a specified string is not null and contains not white-space characters.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:ORMGen.Builders.CSHelper.CSTypeSyntax(System.Type)">
            <summary>
            Get type name C# syntax
            </summary>
            <param name="type">Type</param>
            <returns>String Type name</returns>
        </member>
        <member name="F:ORMGen.Builders.ORMBuilder.ToValidNameRegex">
            <summary>
            Regex for convert name to valid CS name
            </summary>
        </member>
        <member name="M:ORMGen.Builders.ORMBuilder.ORMFromDynamicQueryResult(System.Collections.Generic.IEnumerable{System.Object},System.String,System.String)">
            <summary>
            Build ORMTableInfo class instance from dynamic query result with default provider binding
            </summary>
            <param name="query_result">IEnumerable&lt;dynamic&gt;dapper query result</param>
            <param name="table_name">Table name</param>
            <param name="As">as short name</param>
            <returns>ORMTableInfo</returns>
        </member>
        <member name="M:ORMGen.Builders.ORMBuilder.GenORMTableTypeCode(ORMGen.ORMTableInfo,System.String,ORMGen.Builders.ORMBuilder.GenerateTypeNameEnum)">
            <summary>
            Build ORMTable data model source code
            </summary>
            <param name="orm">ORMTableInfo data model</param>
            <param name="table_name">Name for generate code</param>
            <param name="output_type">Typ of output structure</param>
            <returns></returns>
        </member>
        <member name="T:ORMGen.Builders.ORMBuilder.GenerateTypeNameEnum">
            <summary>
            Output model type
            </summary>
        </member>
        <member name="T:ORMGen.ORMTableInfo">
            <summary>ORMTableInfo data model base class
            </summary>
        </member>
        <member name="P:ORMGen.ORMTableInfo.Name">
            <summary>
            Type name or name for genegation type
            </summary>
        </member>
        <member name="F:ORMGen.ORMTableInfo.Type">
            <summary>
            Access to object type
            </summary>
        </member>
        <member name="P:ORMGen.ORMTableInfo.Title">
            <summary>
            Title for data table
            </summary>
        </member>
        <member name="P:ORMGen.ORMTableInfo.As">
            <summary>
            Use for code generation
            </summary>
        </member>
        <member name="P:ORMGen.ORMTableInfo.TableName">
            <summary>
            Data table name
            </summary>
        </member>
        <member name="P:ORMGen.ORMTableInfo.IdProperty">
            <summary>
            The row identification of the database table, can be a key, composite key, hash property. If not specified using a class attribute, then a single key is selected. Otherwise, an exception is thrown.
            </summary>
        </member>
        <member name="P:ORMGen.ORMTableInfo.TextProperty">
            <summary>
            Text property that give a representation of the object
            </summary>
        </member>
        <member name="P:ORMGen.ORMTableInfo.Readonly">
            <summary>
            Declare the data table object as read-only and the data will not be modified, use for codegeneration
            </summary>
        </member>
        <member name="P:ORMGen.ORMTableInfo.Props">
            <summary>
            List of all properties
            </summary>
        </member>
        <member name="P:ORMGen.ORMTableInfo.Keys">
            <summary>
            List of key properties
            </summary>
        </member>
        <member name="P:ORMGen.ORMTableInfo.References">
            <summary>
            List of reference properties
            </summary>
        </member>
        <member name="M:ORMGen.ORMTableInfo.TryGetIdPropertyName(System.String@)">
            <summary>
            Exception safe try get IdProperty name
            </summary>
            <returns>IdProperty name or null</returns>
        </member>
        <member name="P:ORMGen.ORMTableInfo.DBProvider">
            <summary>
            Selecting the SQL data provider
            </summary>
        </member>
        <member name="M:ORMGen.ORMTableInfo.UseDBProvider(ORMGen.DBProviderEnum)">
            <summary>
            Selecting the SQL data provider
            </summary>
            <param name="provider"></param>
        </member>
        <member name="P:ORMGen.ORMTableInfo.DBFriendly">
            <summary>
            String formatting function for compatibility names with the provider
            </summary>
        </member>
        <member name="M:ORMGen.ORMTableInfo.UseDBFriendly(System.Func{System.String,System.String})">
            <summary>
            String formatting function for compatibility names with the provider
            </summary>
            <param name="db_friendly_func">Func&lt;string, string&gt; db_friendly_func</param>
        </member>
        <member name="P:ORMGen.ORMTableInfo.Rules">
            <summary>
            Default mapping rules
            </summary>
        </member>
        <member name="M:ORMGen.ORMTableInfo.UseRules(ORMGen.ORMRulEnum)">
            <summary>
            Set default mapping rules
            </summary>
        </member>
        <member name="M:ORMGen.ORMHelper.Reject(ORMGen.ORMTableInfo,System.String)">
            <summary>
            Select properties other than those listed
            </summary>
            <param name="orm">ORM instance</param>
            <param name="filter">comma-separated property names to be excluded</param>
            <returns>Enumeration of properties</returns>
        </member>
        <member name="M:ORMGen.ORMHelper.Reject(System.Collections.Generic.IEnumerable{ORMGen.ORMPropertyInfo},System.String)">
            <summary>
            Properties except those specified
            </summary>
            <param name="props">this enumeration properties</param>
            <param name="filter">comma-separated property names to be excluded</param>
            <returns></returns>
        </member>
        <member name="M:ORMGen.ORMHelper.Select(ORMGen.ORMTableInfo,System.String)">
            <summary>
            Select of specific properties
            </summary>
            <param name="orm">ORM instance</param>
            <param name="filter">comma-separated property names to be selected</param>
            <returns>Enumeration of properties</returns>
        </member>
        <member name="M:ORMGen.ORMHelper.ForSelect(System.Collections.Generic.IEnumerable{ORMGen.ORMPropertyInfo})">
            <summary>
            Formatting a list of mapped properties/fields for select script (fields part)
            </summary>
            <returns>Fields part of select script</returns>
        </member>
        <member name="M:ORMGen.ORMHelper.ForSelectConditionKeys(System.Collections.Generic.IEnumerable{ORMGen.ORMPropertyInfo})">
            <summary>
            Formatting a list of mapped properties passed from an object for select script condition (where part)
            </summary>
            <returns>(string) condition for where part</returns>
        </member>
        <member name="M:ORMGen.ORMHelper.ForInsertValues(System.Collections.Generic.IEnumerable{ORMGen.ORMPropertyInfo})">
            <summary>
            Formatting a list of mapped properties passed from an object for insert script (values part)
            </summary>
            <returns>(string) for values part</returns>
        </member>
        <member name="M:ORMGen.ORMHelper.ForUpdateSet(System.Collections.Generic.IEnumerable{ORMGen.ORMPropertyInfo})">
            <summary>
            Formatting a list of values passed from an object for update script (set part)
            </summary>
            <returns>(string) for set part</returns>
        </member>
        <member name="M:ORMGen.ORMHelper.ForSelectFields(ORMGen.ORMTableInfo)">
            <summary>
            Formatting a full properties list of mapped properties passed from an object for select script condition (where part)
            </summary>
            <returns>(string) condition for where part</returns>
        </member>
        <member name="M:ORMGen.ORMHelper.ForSelectConditionKeys(ORMGen.ORMTableInfo)">
            <summary>
            Formatting a key properties list for select script condition (where part)
            </summary>
            <returns>(string) condition for where part</returns>
        </member>
        <member name="M:ORMGen.ORMHelper.ForInsertValues(ORMGen.ORMTableInfo)">
            <summary>
            Formatting a full list of mapped properties passed from an object for insert script (values part)
            </summary>
            <returns>(string) for values part</returns>
        </member>
        <member name="M:ORMGen.ORMHelper.ForUpdateSet(ORMGen.ORMTableInfo)">
            <summary>
            Formatting a full list of values passed from an object for update script (set part)
            </summary>
            <returns>(string) for set part</returns>
        </member>
        <member name="M:ORMGen.ORMHelper.ByDBRule(System.String,ORMGen.ORMRulEnum)">
            <summary>
            Matching, external access
            </summary>
            <param name="name">Name</param>
            <param name="rule">Rule</param>
            <returns>Matched name</returns>
        </member>
        <member name="M:ORMGen.ORMHelper.ByViewRule(System.String,ORMGen.ORMRulEnum)">
            <summary>
            Transformation, external access
            </summary>
            <param name="name">Name</param>
            <param name="rule">Rule</param>
            <returns>Transformed name</returns>
        </member>
        <member name="M:ORMGen.ORMHelper.Humanitaize(System.String)">
            <summary>
            Humanitaize transformation, external access
            </summary>
            <param name="_name">Name</param>
            <returns>Transformed name</returns>
        </member>
        <member name="T:ORMGen.ORMTableInfo`1">
            <summary>ORM data mapping generic class derived from base class
            filled with metadata when created>
            </summary>
        </member>
        <member name="M:ORMGen.ORMTableInfo`1.#ctor(ORMGen.DBProviderEnum)">
            <summary>
            Create a specified ORMTable filled from metadata object and select DB provider
            </summary>
        </member>
        <member name="M:ORMGen.ORMTableInfo`1.#ctor">
            <summary>
            Create a specified ORMTable filled from metadata object
            </summary>
        </member>
        <member name="T:ORMGen.ORMTableAttribute">
            <summary>
            ORMTable attribute
            </summary>
        </member>
        <member name="P:ORMGen.ORMTableAttribute.Title">
            <summary>
            Use title for codogeneration
            </summary>
        </member>
        <member name="P:ORMGen.ORMTableAttribute.As">
            <summary>
            Use As for codogeneration
            </summary>
        </member>
        <member name="P:ORMGen.ORMTableAttribute.TableName">
            <summary>
            Use TableName for script building
            </summary>
        </member>
        <member name="P:ORMGen.ORMTableAttribute.IdProperty">
            <summary>
            Use IdProperty for codogeneration
            </summary>
        </member>
        <member name="P:ORMGen.ORMTableAttribute.TextProperty">
            <summary>
            Use TextProperty for codogeneration
            </summary>
        </member>
        <member name="P:ORMGen.ORMTableAttribute.Readonly">
            <summary>
            Declare the data table object as read-only and the data will not be modified, use for codegeneration
            </summary>
        </member>
        <member name="T:ORMGen.ORMPropertyInfo">
            <summary>
            Represent property attributes. Object filled with metadata describing the data table property and its mapping.
            </summary>
        </member>
        <member name="F:ORMGen.ORMPropertyInfo.Parent">
            <summary>
            ORMTable parent of property
            </summary>
        </member>
        <member name="P:ORMGen.ORMPropertyInfo.Type">
            <summary>
            Type of value, use Type for codogeneration
            </summary>
        </member>
        <member name="P:ORMGen.ORMPropertyInfo.Name">
            <summary>
            Name of property, use Name for codogeneration
            </summary>
        </member>
        <member name="P:ORMGen.ORMPropertyInfo.Title">
            <summary>
            Title of property value, use Title for codogeneration
            </summary>
        </member>
        <member name="P:ORMGen.ORMPropertyInfo.Field">
            <summary>
            Mapping property to a field of data table, use Field for script building
            </summary>
        </member>
        <member name="P:ORMGen.ORMPropertyInfo.Format">
            <summary>
            Format for property value, use Format for codogeneration
            </summary>
        </member>
        <member name="P:ORMGen.ORMPropertyInfo.isKey">
            <summary>
            Indicates that the property value is the key value, use isKey to generate and script together.
            </summary>
        </member>
        <member name="P:ORMGen.ORMPropertyInfo.Readonly">
            <summary>
            Readonly means not writeable to database, for script building
            </summary>
        </member>
        <member name="P:ORMGen.ORMPropertyInfo.RefType">
            <summary>
            Referencing tagged ORMTable or other data table classes, use RefType to co-generation
            </summary>
        </member>
        <member name="P:ORMGen.ORMPropertyInfo.Hide">
            <summary>
            Not displayed property, for codogeneration
            </summary>
        </member>
        <member name="M:ORMGen.ORMPropertyInfo.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ORMGen.ORMPropertyInfo.#ctor(ORMGen.ORMTableInfo,System.String,System.Type)">
            <summary>
            constructor with parameters
            </summary>
            <param name="parent">ORMTable parent for property</param>
            <param name="name"></param>
            <param name="value_type">Type of value</param>
        </member>
        <member name="T:ORMGen.ORMPropertyAttribute">
            <summary>
            Object contains data mapping and other metadata.
            </summary>
        </member>
        <member name="P:ORMGen.ORMPropertyAttribute.Title">
            <summary>
            Title of property value, use Title for codogeneration
            </summary>
        </member>
        <member name="P:ORMGen.ORMPropertyAttribute.Field">
            <summary>
            Mapping property to a field of data table, use Field for script building
            </summary>
        </member>
        <member name="P:ORMGen.ORMPropertyAttribute.Format">
            <summary>
            Format for property value, use Format for codogeneration
            </summary>
        </member>
        <member name="P:ORMGen.ORMPropertyAttribute.isKey">
            <summary>
            Indicates that the property value is the key value, use isKey to generate and script together.
            </summary>
        </member>
        <member name="P:ORMGen.ORMPropertyAttribute.Readonly">
            <summary>
            Readonly means not writeable to database, for script building
            </summary>
        </member>
        <member name="P:ORMGen.ORMPropertyAttribute.RefType">
            <summary>
            Referencing tagged ORMTable or other data table classes, use RefType to co-generation
            </summary>
        </member>
        <member name="P:ORMGen.ORMPropertyAttribute.Hide">
            <summary>
            Not displayed property, for codogeneration
            </summary>
        </member>
        <member name="T:ORMGen.ORMKey">
            <summary>
            Shortly definition of a key property, something like this [ORMKey]
            </summary>
        </member>
        <member name="M:ORMGen.ORMKey.#ctor">
            <summary>
            Shortly definition of a key property, something like this [ORMKey]
            </summary>
        </member>
        <member name="T:ORMGen.ORMReadonly">
            <summary>
            Shortly definition of a readonly field of data table, something like this [ORMReadonly]
            </summary>
        </member>
        <member name="M:ORMGen.ORMReadonly.#ctor">
            <summary>
            Shortly definition of a readonly field of data table, something like this [ORMReadonly]
            </summary>
        </member>
        <member name="T:ORMGen.ORMReadonlyKey">
            <summary>
            Shortly definition of a readonly key field of data table, something like this [ORMReadonlyKey]
            </summary>
        </member>
        <member name="M:ORMGen.ORMReadonlyKey.#ctor">
            <summary>
            Shortly definition of a readonly key field of data table, something like this [ORMReadonlyKey]
            </summary>
        </member>
        <member name="T:ORMGen.ORMRulEnum">
            <summary>
            Eenumeration of rules for mapping to database and view
            </summary>
        </member>
        <member name="F:ORMGen.ORMRulEnum.DBNameAsIs">
            <summary>
            Map name to database unchanged
            </summary>
        </member>
        <member name="F:ORMGen.ORMRulEnum.DBReplaceUnderscoresWithSpaces">
            <summary>
            Replace the name with spaces for underscores to match against the database
            </summary>
        </member>
        <member name="F:ORMGen.ORMRulEnum.DBRemoveUnderscoresAndCapitalize">
            <summary>
            Remove underscores and capitalize Name to match against the database
            </summary>
        </member>
        <member name="F:ORMGen.ORMRulEnum.ViewNameAsIs">
            <summary>
            Map to view Name unchanged
            </summary>
        </member>
        <member name="F:ORMGen.ORMRulEnum.ViewUnderscoresReplaceSpaces">
            <summary>
            Remove underscores and capitalize Name to view
            </summary>
        </member>
        <member name="F:ORMGen.ORMRulEnum.ViewWithUppercase">
            <summary>
            To view title with uppercase
            </summary>
        </member>
        <member name="F:ORMGen.ORMRulEnum.ViewHumanitaize">
            <summary>
            To view title humanitize
            </summary>
        </member>
        <member name="T:ORMGen.ORMRuleSwitcherAttribute">
            <summary>
            ORM rule switcher attribute, effect scoped all subsequent within the class attributes until the next switch
            </summary>
        </member>
        <member name="P:ORMGen.ORMRuleSwitcherAttribute.Rules">
            <summary>
            Assigned rules
            </summary>
        </member>
        <member name="M:ORMGen.ORMRuleSwitcherAttribute.#ctor(ORMGen.ORMRulEnum[])">
            <summary>
            Attribute constructor
            </summary>
            <param name="rules"></param>
        </member>
        <member name="T:ORMGen.ORMData">
            <summary>
            ORM data table Base class of ORM data table, used to build extensions
            </summary>
        </member>
        <member name="T:ORMGen.DBProviderEnum">
            <summary>
            Enumeration of SQL providers
            </summary>
        </member>
    </members>
</doc>
